/**

  \page recept-syntax Recept Syntax

\section recept_syntax_introduction Introduction

A port is a directory containing the files needed for building a package.
This directory will contains various files. The <b>Pkgfile</b> will alway be present.
A pre-installation script file and / or a post-installation script file can also be found in this directory.

The command <b>pkgmk</b> will be used to &quot;build&quot; the package, which can be installed afterwards.

\section recept_syntax_the_directory The port directory

A package directory will always be named by the package name.
The lenght of the name of the folder (means the lenght of the name of the package) should not exceed 50 characters.
<ul>
 <li>
  It should never contains capital letters and never start with a number.
 <li>
  It has to start with a lowercase letter.
 <li>
  It can contains the 26 lowercase letters, the 10 chiffers 0 to 9 and one of following three sympols: -, _ or +
</ul>

Exemple of a directory name:

\code{.sh}
 /usr/ports/mypackages/libstd+-10
\endcode

\section recept_syntax_the_directory_contents The directory contents

In the directory of a port, we should at least find a file named <b>Pkgfile</b>.
We can also find pre-install and post-install scripts.
Those scripts will have the name of the port as prefix.

For example:

\code{.sh}
xmms.pre-install
glib.post-install
\endcode

We can also find a README file. As for the scripts above, it will take the name of the package as prefix

For example:

\code{.sh}
samba.README
rsync.service.README
\endcode
 
\section recept_syntax_the_pkgfile_file The Pkgfile file


\subsection the_dependencies The dependencies

Dependencies are used to specify which other binaries packages needs to be installed before cards can
compile the port without dependencies failures.

The syntax of declaring dependencies is done via a comment line as a follow example:

\code{.sh}
# Depends on: glibc gtk2 glib libvorbis python
\endcode

Dependencies are found by cards recursively, means you don't have to repeat dependencies
that are already declard in the dependencies ports packages

Here, We are only talking about sources or compilations dependencies.
Runtime dependencies are normaly not specified as cards will find them for you.
See runtime dependencies below

\subsection available_variables Available Variables

A recept is always following a choosen template depending of the kind of package we want to produce.
Variables are then usefull when it comes to customisation our template with a minimum of effort.
We can then easily produce a specific recept.

\subsubsection the_mandatory_variables The mandatory variables

The minimum information required for producing a binary are:

<ul>
 <li>
   <i><b>version:</b></i> the version of the sources of the package.
 <li>
   <i><b>release:</b></i> the nth attempt at building the package.
   Its value will always start at <b><i>1</i></b>
</ul>

\code{.sh}
version=3.2.1-b1
release=945
\endcode

\subsubsection the_high_recommended_variables The High recommended variables

Even if it is not mandatory, the name variable is highly recommended for improved readability of the recept
\code{.sh}
name=libstd++-
\endcode

One or more alias can be defined, they permit cards to call the binary package via one of those.
The alias variable is declare in a array of strings
An alias may contains uppercase letters.
You should alias with great care as you are not allow to use an existing Package name for an alias.
\code{.sh}
alias=(name1 name2 name3)
\endcode

A description can contains up to 110 characters maximum.
Try to be as consistent as possible and avoid unecessary worlds.
\code{.sh}
description="Text editor with colored syntax supporting many languages"
\endcode


Information available on the net can be pass to the url variable, for example:
\code{.sh}
url="http://www.gtk.org/documentation.php"
\endcode

The name of the packager(s) can be specify via the packager variable:
\code{.sh}
packager="pierre at nutyx dot org, tnut at nutyx dot org"
\endcode

The name of the maintainer(s) can be specify via the maintainer variable:
\code{.sh}
maintainer="Daniel Stenberg and many more"
\endcode

The name of a group can be provide if necessary via the group variable:
\code{.sh}
group=kf5
\endcode

Dependencies not automaticaly detect by cards should be pass via the run array variable:
\code{.sh}
run=(python gawk)
\endcode

The sources of the package will be insert via the source array variable, here is an complete example:
\code{.sh}
source=(http://ftp.gnome.org/pub/gnome/sources/glib/${version:0:4}/$name-$version.tar.xz
        glib-revert-warn-glib-compile-schemas.patch)
\endcode

\subsubsection recept_syntax_available_variables The available variables

All the defined variables located into the /etc/pkgmk.conf file can be reused into our Pkgfile recept
Consult the manual of pkgmk.conf
\code
man pkgmk.conf
\endcode

Following variables are just examples you can use:
\code{.sh}
PKGMK_KEEP_SOURCES="no"
PKGMK_GROUPS=()
PKGMK_COMPRESSION_MODE="xz"
PKGMK_NO_STRIP="yes"
\endcode


\section recept_syntax_the_available_functions The Available functions

All the available functions are using TWO specific variables, thoses two variables are set onces and
should never be set again.
<ul>
 <li>
  SRC is the variable which define the root working folder
 <li>
  PKG is the variable which define the root packaging folder
</ul>

They are define in the /etc/pkgmk.conf file via the PKGMK_WORK_DIR variable (parent folder of SRC and PKG)

\subsection recept_syntax_the_mandatory_build_function The mandatory build() function

Here is one of the most used model:

\code{.sh}
build() {
  cd $name-$version

  ./configure --prefix=/usr

  make

  make DESTDIR=$PKG install

}
\endcode

\subsection recept_syntax_the_optionnal_reconize_functions The optionnal reconize functions

Possible functions are:

\code{.sh}
prepare() {
...
}
package() {
...
}
man(){
...
}
devel() {
...
}
service() {
...
}
doc() {
...
}
lib() {
...
}
\endcode


\section recept_syntax_conclusion Conclusion

To conclude, a full example with all the possible variables:

\code{.sh}
# Depends on: gtk-doc shared-mime-info,xorg-libxinerama,xorg-libxrandr,cairo,pango,pangox-compat,atk,libtiff,cups,gdk-pixbuf,xorg-libxi,xorg-libxcursor,hicolor-icon-theme,gtk-update-icon-cache

description="GTK+ is a multi-platform toolkit (version 2)"
url="http://www.gtk.org/"
packager="pierre at nutyx dot org, tnut at nutyx dot org"

name=gtk2
version=2.46.3
release=1

alias=(Gtk+ gtk+)

run=(python)

PKGMK_KEEP_SOURCES="no"

_name=gtk+

source=(http://ftp.gnome.org/pub/gnome/sources/${_name}/${version%.*}/${_name}$version.tar.xz)

build() {
   cd ${_name}-$version

   sed -i 's#l \(gtk-.*\).sgml#& -o \1#' docs/{faq,tutorial}/Makefile.in
   sed -i "/seems to be moved/s/^/#/" ltmain.sh

   ./configure --prefix=/usr \
   --mandir=/usr/share/man \
   --infodir=/usr/share/info \
   --sysconfdir=/etc

   make

   make DESTDIR=$PKG install


   mkdir -p $PKG/etc/gtk-2.0
   echo 'gtk-fallback-icon-theme = "Tango"' > $PKG/etc/gtk-2.0/gtkrc

   # Already build in gtk-update-icon-cache
   rm -f $PKG/usr/bin/gtk-update-icon-cache
   rm -f $PKG/usr/share/man/man1/gtk-update-icon-cache.1

}
doc() {
   cd $PKG

   bsdtar -cf \
   $PKGMK_PACKAGE_DIR/${name}.doc${PKGMK_BUILDVER}any.cards.tar \
   usr/share/gtk-doc usr/share/gtk-2.0/demo

   rm -r usr/share/{gtk-doc,gtk-2.0/demo}
}
devel() {
   cd $PKG

   bsdtar -cf \
   $PKGMK_PACKAGE_DIR/$name.devel${PKGMK_BUILDVER}any.cards.tar \
   usr/lib/pkgconfig \
   usr/include \
   usr/share/gir-1.0

   rm -r usr/{share/gir-1.0,lib/pkgconfig,include}   
}
\endcode

*/
