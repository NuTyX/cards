#!/bin/bash
#  Copyright (c) 2016 - 2024 by NuTyX team (http://nutyx.org)

usage () {
  echo '
USAGE
      mybld [option] <collection>|<package> [version]

OPTIONS
      -c, --cleanup <collection>
              Clean the /<version>/<collection> folder in a safety way.

      -A, --ask
              Ask for confirmation.

      -p, --pause
              Make a pause after enter in to the chroot.

      -n, --new <collection>/<package> [version] [description] [url] [sources]
              Create a new <collection>/<package>/Pkgfile.

      -C, --check <package>
             Check if all the source files can be downloaded.

      -i, --increment <package>
             Increment the release number and build the package.

      -I, --init
             Create all the necessary folder (sources, LOGS and depot).

      -d, --diff
             Check what are the outdated packages

      -s, --sync <collection>
             Synchronize all the binaries of the <collection>.

MORE INFO
       mybld(8)

'|more
}
get_filename() {
	if [[ $1 =~ ^(http|https|ftp|file)://.*/(.+) ]]; then
		echo "${ROOTMOUNT}/$PKGMK_SOURCE_DIR/${BASH_REMATCH[2]}"
	else
		echo $1
	fi
}
check_download_sources() {
	local FILE LOCAL_FILENAME
	DOWNLOAD_OPTS="-sfLo/dev/null -r0-0"
	for FILE in ${source[@]}; do
		LOCAL_FILENAME="$(get_filename $FILE)"
		if [ ! -e $LOCAL_FILENAME ]; then
			if [ "$LOCAL_FILENAME" = "$FILE" ]; then
				echo "Source file '$LOCAL_FILENAME' not found (can not be downloaded, URL not specified)."
				exit 1
			else
					curl $DOWNLOAD_OPTS $FILE
					if [ $? != 0 ]; then
						echo ">>>    $FILE' not found, check URL !!!
"
						exit 1
					fi
			fi
		fi

	done
}
generate_Pkgfile() {
  if [ ! -d ${COLLECTION} ]; then
    echo  "
>>>     The collection '${COLLECTION}' does not exist
"
    exit 1
  fi
  if [ "$(git config user.name)" == "" ];then
    echo "
>>>     your username is not set in your $HOME/.gitconfig
"
    exit 1
  fi
  if [ "$(git config user.email)" == "" ];then
    echo "
>>>     your email is  not set in your $HOME/.gitconfig
"
    exit 1
  fi
  if [ -f ${COLLECTION}/${PARAM}/Pkgfile ];then
    echo "
>>>     ABORT: File '${COLLECTION}/${PARAM}/Pkgfile' already exist !!!
"
    exit 1
  fi
  mkdir -p "${COLLECTION}/${PARAM}"
  echo "description='${3}'
url='${4}'

packager=\"$(git config user.name) <$(git config user.email)>\"
contributors=\"\"

makedepends=()
run=()
set=()

name=${PARAM}
version=${2}

source=(${5})

build() {
cd \$name-\$version
./configure --prefix=/usr
make
make DESTDIR=\$PKG install
}" > ${COLLECTION}/${PARAM}/Pkgfile
  $EDITOR ${COLLECTION}/${PARAM}/Pkgfile
}

create_folders () {
  if [ -z "$VERSION" ]; then
    echo "
>>>     VERSION is not SET
"
    exit 1
  fi
  sudo mkdir -p $ROOT/$VERSION
  sudo chown -R $(whoami):$(whoami) $ROOT/$VERSION
  sudo mkdir -p /$ROOTMOUNT/{logs/$(uname -m)/$VERSION,sources,$(uname -m)/$VERSION}
  sudo chown -R $(whoami):$(whoami) /$ROOTMOUNT
}
ding() {
PLAY="$(which paplay)"
if [ -z $PLAY ]; then
  echo " ====> Install pulseaudio, cannot play sound
"
  return
fi
$PLAY /usr/share/sounds/cards/ding.wav &
}
rsync_binaries () {
  local options="-avd --no-r --delete"
  if [ -z "$VERSION" ]; then
    echo "
>>>     VERSION is not SET
"
    exit 1
  fi
  if [ ! -z ${PARAM[0]} ]; then
    echo "
rsync $options \
$URL/$(uname -m)/$VERSION/$COLLECTION/${PARAM[0]}.*  \
$ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
"
    echo -n "  OK ? (y) : "
    answer
    rsync $options \
$URL/$(uname -m)/$VERSION/$COLLECTION/${PARAM[0]}.* \
$ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
    exit 0
  fi

  if [ ! -z $COLLECTION ]; then
    echo "
sudo mkdir -p $ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
sudo chown -R $(whoami):$(whoami) $ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
rsync $options \
$URL/$(uname -m)/$VERSION/$COLLECTION/ \
$ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
"
    echo -n "  OK ? (y) : "
    answer
    sudo mkdir -p $ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
    sudo chown -R $(whoami):$(whoami) $ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
    rsync $options \
$URL/$(uname -m)/$VERSION/$COLLECTION/ \
$ROOTMOUNT/$(uname -m)/$VERSION/$COLLECTION/
    exit 0
  fi

  echo "
mkdir -p $ROOTMOUNT/$(uname -m)/$VERSION/
sudo chown -R $(whoami):$(whoami) $ROOTMOUNT/$(uname -m)/$VERSION/
rsync $options \
$URL/$(uname -m)/$VERSION/ \
$ROOTMOUNT/$(uname -m)/$VERSION/
"
  echo -n "  OK ? (y) : "
  answer
  mkdir -p $ROOTMOUNT/$(uname -m)/$VERSION/
  sudo chown -R $(whoami):$(whoami) $ROOTMOUNT/$(uname -m)/$VERSION/
  rsync $options \
$URL/$(uname -m)/$VERSION/ \
$ROOTMOUNT/$(uname -m)/$VERSION/
  exit 0
}

parse_arguments() {
  while [ "$1" ]; do
    case $1 in
    -c|--cleanup)
      CLEANUP="yes"
      shift
      if [ -z ${1} ]; then
        echo "
>>> Specify the collection
"
        exit 1
      fi
      PARAM+=($1);;

    -n|--new)
      shift
      COLLECTION="$(echo ${1}|cut -d '/' -f1)"
      PARAM="$(echo ${1}|cut -d '/' -f2)"
      if [ ! -f "${COLLECTION}/${PARAM}/Pkgfile" ]; then
        COLLECTION="$(echo ${1}|cut -d '/' -f1)"
        generate_Pkgfile "$@"
        exit 0
      fi
      echo "
>>> The package '${PARAM}' already exist in the '${COLLECTION}' collection !!!
"
      exit 1;;

	-C|--check)
      CHECK="yes"
      shift
      if [ -z ${1} ]; then
        echo "
>>> Specify the name
"
        exit 1
      fi
      PARAM+=($1);;

    -i|--increment)
      INCREMENT="yes"
      shift
      if [ -z ${1} ]; then
        echo "
>>> Specify the name
"
        exit 1
      fi
      PARAM+=($1);;

    -p|--pause)
      MANUAL="yes"
      PAUSE=" && printf \"You are now in the chroot.\n\
Type exit when finish.\n\n Good Luck !!!\n\n\" && bash";;

    -I|--init)
      INIT="yes";;

    -d|--diff)
      DIFF="yes"
      shift
      if [ -z ${1} ]; then
        echo "
>>> Specify a collection/name
"
        exit 1
      fi
      PARAM+=($1);;

    -s|--sync)
      SYNC="yes"
      shift
      if [ -z ${1} ]; then
        echo "
>>> Specify a collection/name
"
        exit 1
      fi
      PARAM+=($1);;

    -A|--ask)
      CONFIRM="yes"
      echo "====> you ask confirmation" ;;

    -h|--help)
      usage
      exit 0 ;;

    -*|--*)
      usage
      exit 1;;
    *)
        PARAM+=($1)
    esac

    shift
  done
}

interrupted() {
  echo "Interrupted !!!"
}

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

umount_all() {
	for FOLDER in $MOUNT_POINTS ; do
		if mountpoint -q $ROOT/${VERSION}/${COLLECTION}/${FOLDER}; then
			sudo umount -R $ROOT/${VERSION}/${COLLECTION}/${FOLDER} || exit 1
			sudo rm -d     $ROOT/${VERSION}/${COLLECTION}/${FOLDER} || exit 1
		fi
	done
}

remove_all() {
	for FOLDER in $MOUNT_POINTS; do
		if [ -d $ROOT/${VERSION}/${COLLECTION}/${FOLDER} ]; then
		       echo "$ROOT/${VERSION}/${COLLECTION}/${FOLDER} is a directory"
		       exit 1
		fi
	done
	if [ -z $ROOT/${VERSION}/${COLLECTION} ]; then
	       	exit 1
	fi
	if [ ! -d $ROOT/${VERSION}/${COLLECTION} ]; then
	       	exit 0
	fi
	for i in run sys proc dev/pts dev/shm dev; do
		[ -d $ROOT/${VERSION}/${COLLECTION}/${i} ] || continue
		mountpoint -q $ROOT/${1}/${i}  || continue
		sudo umount -R $ROOT/${1}/${i} || exit 1

	done
	for FOLDER in $ROOT/${VERSION}/${COLLECTION}/* ; do
		[ -d ${FOLDER} ] || continue
		! mountpoint -q ${FOLDER} || continue
		sudo rm -r $FOLDER || exit 1
  	done
	rm -d $ROOT/${VERSION}/${COLLECTION} || exit 1
	echo "
>>>   $ROOT/${VERSION}/${COLLECTION} cleanup successfully ...
"
}

answer() {
  read a
  if [ "$a" != "y" ] && [ "$a" != "Y" ] && [ "$a" != "yes" ]; then
    echo "
Answer should be 'y, Y or yes'
"
    exit 1
  fi
}

error() {
  echo ">>> ERROR: $1"
  umount_all
  remove_all
  exit 1
}
find_new_packager () {
  newpackager="$(git config user.name) <$(git config user.email)>"
  newpackagername="$(git config user.name)"
  [ "$packager" == "$newpackager" ] && return
  oldpackager="$(echo ${packager%[ ,<]*}|sed "s/\b\(.\)/\l\1/g")"
  newcontributors="$(echo $contributors|sed -e "s/Pierre B/Pierre/g" \
   -e "s/\b\(.\)/\l\1/g" -e "s/$oldpackager//")"

  newcontributors+=",$oldpackager"
  newcontributors="$(echo $newcontributors|sed -e "s/\b\(.\)/\l\1/g" \
  -e "s/$newpackagername//g" -e "s/ /,/g" -e "s/\(,\)\1\+/\1/g" \
  -e "s/\b\(.\)/\u\1/g" -e "s/^,//g" -e "s/,$//g")"
}
find_set () {
  local i=0 p c s n
  for c in base cli cli-extra gui gui-extra
  do
     for n in $c/*/Pkgfile
     do
         . $n
         [ -z $set ] && continue
         [ "$version" == "${PARAM[1]}" ] && continue
         for s in ${set[@]}
         do
            if [ "$s" == "${PARAM[0]}" ]; then
                PACKAGES_LIST[i]="$(dirname $n)"
                i=$((i+1))
            fi
         done
         unset set
     done
     [ -z $PACKAGES_LIST ] || COLLECTION=$c
     [ -z  $COLLECTION ] || return
  done
  add_collection_to_packagelist
}
find_version () {
  local i=0 p c n
  #TODO consider 'mycollection' 'mycollection-extra' if exists
  for c in base cli cli-extra gui gui-extra
  do
     #FIXME version="1.2.4" or version='1.2.3' doesn't work
     for n in $(grep -wl version="${PARAM[0]}"$ $c/*/Pkgfile)
     do
        PACKAGES_LIST[i]="$(dirname $n)"
        i=$((i+1))
     done
     [ -z $PACKAGES_LIST ] || COLLECTION=$c
     [ -z  $COLLECTION ] || return
  done
  add_collection_to_packagelist
}
add_collection_to_packagelist () {
  local i n p
  i=0
  for n in ${PACKAGES_LIST[@]}
  do
    [ "$p" == "$(dirname $n)" ] && continue
    COLLECTION[i]="$(dirname $n)"
    p="$(dirname $n)"
    i=$((i+1))
  done
}
find_collection () {
  #FIXME name="mypackage", name='mypackage' doesn't work
  for n in $(grep -wl name="${PARAM[0]}"$ */*/Pkgfile)
  do
    unset COLLECTION
    COLLECTION="$(dirname $(dirname $n))"
    [ -z $COLLECTION ] || break
  done
  [ -z $COLLECTION ] || return

  COLLECTION="$(find . -type d -name ${PARAM[0]})"
  [ -z $COLLECTION ] || COLLECTION=$(basename $COLLECTION)
  [ -z $COLLECTION ] || unset PARAM
}

setup_pkgmk_conf() {
[ -z  "$PKGMK_GROUPS" ] && PKGMK_GROUPS="devel man doc service"
[ -z  "$PKGMK_KEEP_SOURCES" ] && PKGMK_KEEP_SOURCES="yes"
[ -z  "$PKGMK_WORK_DIR" ] && PKGMK_WORK_DIR="/tmp/work"
[ -z  "$PKGMK_COMPRESSION_OPTS" ] && PKGMK_COMPRESSION_OPTS="-19 --threads=$(getconf _NPROCESSORS_ONLN)"
[ -z  "$PKGMK_COMPRESS_PACKAGE" ] && PKGMK_COMPRESS_PACKAGE="yes"
[ -z  "$PKGMK_COMPRESSION_MODE" ] && PKGMK_COMPRESSION_MODE="zst"
[ -z  "$PKGMK_LOCALES" ] && PKGMK_LOCALES="af an ar as az be bg \
bs ca cs cy da de el es fi fr ga gl gn he hi hr hu ia id is it \
ja ka kk km kn ko lt lv mk ml mr ms my nl nn oc or pa pt pl rm \
ro ru rw si sq sk sl sr sv ta te th tr uk ur uz vi xh zh"

  PKGMK_CONF='
export CFLAGS="-O2 -pipe"
export CXXFLAGS="${CFLAGS}"
export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
PKGMK_CLEAN="no"
PKGMK_SOURCE_DIR="/sources"
PKGMK_IGNORE_REPO="no"
PKGMK_IGNORE_RUNTIMEDEPS="no"'

  PKGMK_CONF+="
PKGMK_LOCALES=($PKGMK_LOCALES)
PKGMK_KEEP_SOURCES=\"$PKGMK_KEEP_SOURCES\"
PKGMK_WORK_DIR=\"$PKGMK_WORK_DIR\"
PKGMK_PACKAGE_DIR=\"/DEPOT/$COLLECTION\"
PKGMK_GROUPS=($PKGMK_GROUPS)
PKGMK_COMPRESSION_OPTS=\"$PKGMK_COMPRESSION_OPTS\"
PKGMK_COMPRESS_PACKAGE=\"$PKGMK_COMPRESS_PACKAGE\"
PKGMK_COMPRESSION_MODE=\"$PKGMK_COMPRESSION_MODE\""
}
setup_cards_conf() {
  CARDS_CONF="group devel
group lib
depot /DEPOT"
  FOUND="no"
  MYCOLLECTION="${COLLECTION%-extra}"
  for i in "${COLLECTIONS[@]}"
  do
     [ $i == $MYCOLLECTION ] && FOUND="yes"
  done
  if [ $FOUND == "yes" ]; then
    unset MYCOLLECTION
  fi
  FOUND="no"
  for i in "$MYCOLLECTION" "${COLLECTIONS[@]}"
  do
    [ -z $i ] && continue
    if [ $FOUND == "yes" ];then
      CARDS_CONF+="
collection $i"
      continue
    fi
    if [ $COLLECTION == $i-extra ]; then
      CARDS_CONF+="
collection $i-extra
collection $i"
      FOUND="yes"
    fi
    if  [ $COLLECTION == $i ]; then
      CARDS_CONF+="
collection $i"
      FOUND="yes"
    fi
  done
  CARDS_CONF+="
logdir /LOGS"
}
#
#
########################################################################
# BEGIN HERE
########################################################################
if [ "$UID" == "0" ]; then
    echo "
>>> The 'root' account is not allow to use $(basename ${0})
"
    exit 1
fi

[ -f $HOME/.mybld ] && source $HOME/.mybld
[ -z "$ROOTMOUNT" ] && ROOTMOUNT="$HOME/www"
[ -z "$ROOT" ] && ROOT="$HOME/mybld"
[ -z "$URL" ] && URL="rsync://download.nutyx.org/nutyx"
[ -z "$EDITOR" ] && EDITOR="vi"
[ -z "$COLLECTIONS" ] && COLLECTIONS=(gui cli base)
[ -z "$VERSION" ] && VERSION="$(git branch --show-current)"

GIT_PROJ=$(pwd)
GIT="mybld/$(basename $GIT_PROJ)"
CLEANUP="no"

if [ -z "$GIT_PROJ" ]; then
  error "Git root: ${GIT_PROJ} empty"
  exit 1
fi

if [ ! -d .git ]; then
  echo "
>>> No Git project found in '"$GIT_PROJ"', The '.git' folder not exist.
"
  exit 1
fi
if [ -z "${1}" ]; then
  echo "
>>> At least one argument is mandatory
"
  exit 1
fi
if ! ( $(which rsync > /dev/null) ); then
  echo "
>>>     'rsync' not available
"
  exit 1
fi
if ! ( $(which git > /dev/null) ); then
  echo "
>>>     'git' not available
"
  exit 1
fi
if ! ( $(which $EDITOR > /dev/null) ); then
  echo "
>>>     '$EDITOR' not available
"
  exit 1
fi

parse_arguments "$@"
find_version
[ -z "$PACKAGES_LIST" ] && find_set

if [ "$INIT" == "yes" ]; then
  create_folders
  exit 0
fi

[ -z "$PACKAGES_LIST" ] || CONFIRM="yes"

[ -z "$COLLECTION" ] && find_collection

if [ "$SYNC" == "yes" ]; then
  rsync_binaries
fi

if [ -z "${PARAM[0]}" ]; then
  if [ -z "${COLLECTION}" ]; then
    echo "
>>> Specify the collection
"
    exit  1
  fi
fi

if [ -z "${COLLECTION}" ]; then
  echo "
>>> package '${PARAM[0]}' not found in any collection
"
  exit  1
fi

if [[ -d "$ROOT/${VERSION}/${COLLECTION}" && "$CLEANUP" != "yes" ]]; then
  mount | grep /"${VERSION}/${COLLECTION}"
  echo "
>>> $ROOT/${VERSION}/${COLLECTION} exist ...
"
  echo -n "Safety cleanup of $ROOT/${VERSION}/${COLLECTION} ? : "
  answer
  CLEANUP="auto"
fi

if [ "$CLEANUP" != "no" ]; then
  MOUNT_POINTS="DEPOT LOGS sources $GIT"
  umount_all
  remove_all "/${VERSION}/${COLLECTION}"
  [ "$CLEANUP" == "yes" ] && exit 0
fi

if [ -z ${PACKAGES_LIST} ]; then
 if [ ! -z "${PARAM[1]}" ]; then
  CONFIRM="yes"
    if [ ! -f "$COLLECTION/${PARAM[0]}/Pkgfile" ]; then
      echo " $COLLECTION/${PARAM[0]}/Pkgfile not exist"
      exit 1
    fi
    . "$COLLECTION"/"${PARAM[0]}"/Pkgfile
    if [ -z "$version" ]; then
      echo ">>> version variable not set !"
      exit 1
    fi
    if [ "$version" == "${PARAM[1]}" ]; then
      echo ">>> version is the same !!!"
      exit 1
    fi
 fi
 if [ "$INCREMENT" == "yes" ]; then
  CONFIRM="yes"
  if [ ! -f "$COLLECTION/${PARAM[0]}/Pkgfile" ]; then
    echo " $COLLECTION/${PARAM[0]}/Pkgfile not exist"
    exit 1
  fi
  . "$COLLECTION"/"${PARAM[0]}"/Pkgfile
  [ -z "$release" ] && release=1

 fi
fi
# check if VERSION folder exist
if ! [ -d "$ROOT/$VERSION" ]; then
  echo ">>>   $ROOT/$VERSION folder not exist."
  exit 1
fi

# check if VERSION is own by me
if ! [ -O "$ROOT/$VERSION" ]; then
  echo ">>> $ROOT/$VERSION is not own by $(whoami)"
  exit 1
fi

setup_cards_conf
DEVEL="cd /$GIT \
$PAUSE "

if [ -z $MANUAL ]; then
  DEVEL+="&& cards create"
  if [ ! -z ${PACKAGES_LIST} ]; then
    if [ "$DIFF" == "yes" ];then
      DEVEL="$DEVEL $COLLECTION --dry"
    else
      DEVEL="$DEVEL $COLLECTION"
    fi
  else
    if [ -z "${PARAM[0]}" ]; then
      if [ "$DIFF" == "yes" ];then
        DEVEL="$DEVEL $COLLECTION --dry"
      else
        DEVEL="$DEVEL $COLLECTION"
      fi
    else
      DEVEL="$DEVEL ${PARAM[0]}"
    fi
  fi
fi

setup_pkgmk_conf

export DEVEL VERSION
echo ""
if [ -f $HOME/.mybld ];then
  echo " $HOME/.mybld:
 =================================
"

  cat $HOME/.mybld
else
  echo ">>>       $HOME/.mybld not found"
fi
echo ""
echo " pkgmk.conf:
 ==========="
echo "$PKGMK_CONF"
echo ""
echo " cards.conf:
 ==========="
echo "$CARDS_CONF"
echo ""
echo " COLLECTION: $COLLECTION"
echo "GIT Project: $GIT_PROJ"
echo "    VERSION: $VERSION"
echo "      DEVEL: $DEVEL "
echo "  ROOTMOUNT: $ROOTMOUNT"
echo "The command: KERNEL=\"NONE\" LFS=\"$ROOT/${VERSION}/${COLLECTION}\" DEPOT=\"/DEPOT\" DEVEL=\"$DEVEL\" install-nutyx -t"
echo ""
echo " install-nutyx:
 =============="
KERNEL="NONE" LFS="$ROOT/${VERSION}/${COLLECTION}" DEPOT="/DEPOT" DEVEL="$DEVEL" install-nutyx -t
echo ""

if [ -z "$PACKAGES_LIST" ]; then
  if [ ! -z "${PARAM[1]}" ]; then
    find_new_packager
    echo ""
    echo " Upgrading ${PARAM[0]}:"
    echo "       version: $version -> ${PARAM[1]}"
    if [ "$packager" != "$newpackager" ]; then
      echo "      packager: $packager -> $newpackager"
      echo "  contributors: $contributors -> $newcontributors"
    fi
    echo ""
  fi
else
  for i in ${PACKAGES_LIST[@]}
  do
    . $i/Pkgfile
    find_new_packager
    echo " Upgrading $(basename $i): $version -> ${PARAM[1]}"
    if [ "$packager" != "$newpackager" ]; then
       echo "      packager: $packager -> $newpackager"
       echo "  contributors: $contributors -> $newcontributors"
       echo ""
    fi
  done
  echo ""
fi

if [ "$INCREMENT" == "yes" ]; then
  find_new_packager
  echo " Upgrading ${PARAM[0]}:"
  echo "       version: $version-$release -> $version-$((release+1))"
  if [ "$packager" != "$newpackager" ]; then
    echo "      packager: $packager -> $newpackager"
    echo "  contributors: $contributors -> $newcontributors"
  fi
  echo ""
fi
if [ "$CONFIRM" == "yes" ]; then
  echo -n "  OK ? (y) : "
  answer
fi

#
##### Main Config files ######
mkdir -p "$ROOT/${VERSION}/${COLLECTION}/etc" || exit 1
echo "$PKGMK_CONF" > $ROOT/$VERSION/$COLLECTION/etc/pkgmk.conf
echo "$CARDS_CONF" > $ROOT/$VERSION/$COLLECTION/etc/cards.conf
##############################
. $ROOT/$VERSION/$COLLECTION/etc/pkgmk.conf

if [ -z "$PACKAGES_LIST" ]; then
   if [ ! -z "${PARAM[1]}" ]; then
     sed -i "s@version=$version@version=${PARAM[1]}@" \
      "$COLLECTION"/"${PARAM[0]}"/Pkgfile
     sed -i "/release=/d" "$COLLECTION"/"${PARAM[0]}"/Pkgfile
     if [ "$packager" != "$newpackager" ]; then
      sed -e 's/^\(packager=\).*/\1/g' \
       -e "s/packager=/packager=\"$newpackager\"/" \
       -i "$COLLECTION"/"${PARAM[0]}"/Pkgfile
      sed -e 's/^\(contributors=\).*/\1/g' \
       -e "s/contributors=/contributors=\"$newcontributors\"/" \
       -i "$COLLECTION"/"${PARAM[0]}"/Pkgfile
     fi
   fi
else
  echo ""
  for i in ${PACKAGES_LIST[@]}
  do
    . $i/Pkgfile
    find_new_packager
    sed -i "s@version=$version@version=${PARAM[1]}@" \
      "${i}"/Pkgfile
     sed -i "/release=/d" "${i}"/Pkgfile
     if [ "$packager" != "$newpackager" ]; then
      sed -e 's/^\(packager=\).*/\1/g' \
       -e "s/packager=/packager=\"$newpackager\"/" \
       -i "${i}"/Pkgfile
      sed -e 's/^\(contributors=\).*/\1/g' \
       -e "s/contributors=/contributors=\"$newcontributors\"/" \
       -i "${i}"/Pkgfile
     fi
     release=1
     . $i/Pkgfile
     cd $i
     check_download_sources
     echo "====> sources of $i [ OK ]"
     cd - > /dev/null
  done
  echo ""
fi
if [ "${PARAM[1]}" = "" ]; then
    if [ -f "$COLLECTION/${PARAM[0]}/Pkgfile" ]; then
        . "$COLLECTION"/"${PARAM[0]}"/Pkgfile
        if [ -z "$version" ]; then
            echo ">>> version variable not set !"
            exit 1
        fi
    fi
fi

if [ "$INCREMENT" == "yes" ]; then
  sed -i "/release=/d" "$COLLECTION"/"${PARAM[0]}"/Pkgfile
  sed -i "/^version=/ a release=$((release+1))" "$COLLECTION"/"${PARAM[0]}"/Pkgfile
  if [ "$packager" != "$newpackager" ]; then
    sed -e 's/^\(packager=\).*/\1/g' \
    -e "s/packager=/packager=\"$newpackager\"/" \
    -i "$COLLECTION"/"${PARAM[0]}"/Pkgfile
    sed -e 's/^\(contributors=\).*/\1/g' \
    -e "s/contributors=/contributors=\"$newcontributors\"/" \
    -i "$COLLECTION"/"${PARAM[0]}"/Pkgfile
  fi
fi

if [ -f "$COLLECTION/${PARAM[0]}/Pkgfile" ]; then
   release=1
   . "$COLLECTION"/"${PARAM[0]}"/Pkgfile
   cd "$COLLECTION/${PARAM[0]}/"
   check_download_sources
fi
if [ "$CHECK" == "yes" ]; then
   echo "====> Found all the source files
"
   exit 0
fi
mkdir -p $ROOT/${VERSION}/${COLLECTION}/DEPOT || error "cannot create $ROOT/${VERSION}/${COLLECTION}/DEPOT  directory"
if [ -d ${ROOTMOUNT}/$(uname -m)/${VERSION} ]; then
  sudo mount --bind ${ROOTMOUNT}/$(uname -m)/${VERSION} $ROOT/${VERSION}/${COLLECTION}/DEPOT || \
  error "mounting ${ROOTMOUNT}/$(uname -m)/${VERSION}"
  if [ -z "${PARAM[0]}" ]; then
     if [ ! -f $ROOT/${VERSION}/${COLLECTION}/DEPOT/${COLLECTION}/.PKGREPO ]; then
        sudo mkdir -p $ROOT/${VERSION}/${COLLECTION}/DEPOT/${COLLECTION}
        sudo touch $ROOT/${VERSION}/${COLLECTION}/DEPOT/${COLLECTION}/.PKGREPO
     fi
  fi
else
  error "${ROOTMOUNT}/$(uname -m)/${VERSION} not exist."
fi
MOUNT_POINTS="DEPOT"

mkdir -p $ROOT/${VERSION}/${COLLECTION}/LOGS
if [ -d ${ROOTMOUNT}/logs/$(uname -m)/${VERSION} ];then
  sudo mount --bind ${ROOTMOUNT}/logs/$(uname -m)/${VERSION} $ROOT/${VERSION}/${COLLECTION}/LOGS || \
  error "mounting ${ROOTMOUNT}/logs/$(uname -m)/${VERSION}"
else
  error "${ROOTMOUNT}/logs/$(uname -m)/${VERSION} not existing"
fi
MOUNT_POINTS="$MOUNT_POINTS LOGS"


mkdir -p $ROOT/${VERSION}/${COLLECTION}/sources || error /${VERSION}/${COLLECTION}
if [ -d ${ROOTMOUNT}/sources ]; then
  sudo mount --bind ${ROOTMOUNT}/sources $ROOT/${VERSION}/${COLLECTION}/sources || \
  error "mounting ${ROOTMOUNT}/sources"
else
  error "${ROOTMOUNT}/sources not existing"
fi
MOUNT_POINTS="$MOUNT_POINTS sources"

mkdir -p $ROOT/${VERSION}/${COLLECTION}/$GIT

sudo mount --bind ${GIT_PROJ} $ROOT/${VERSION}/${COLLECTION}/$GIT || \
error "mounting ${GIT_PROJ}"

MOUNT_POINTS="$MOUNT_POINTS $GIT"

echo 'running the command:
sudo KERNEL=\"NONE\" LFS=\"$ROOT/${VERSION}/${COLLECTION}\" DEPOT=\"/DEPOT\" DEVEL=\"$DEVEL\" install-nutyx'
sudo KERNEL="NONE" LFS="$ROOT/${VERSION}/${COLLECTION}" DEPOT="/DEPOT" DEVEL="$DEVEL" install-nutyx || \
error "sudo KERNEL=\"NONE\" LFS=\"$ROOT/${VERSION}/${COLLECTION}\" DEPOT=\"/DEPOT\" DEVEL=\"$DEVEL\" install-nutyx"

[ -z $MANUAL ] && ding
umount_all
remove_all "/${VERSION}/${COLLECTION}"
unset VERSION DEVEL

if [ ! -z $MANUAL ]; then
  exit 0
fi

# Don't try to commit if no specific package was build
if [ -z "${PARAM[0]}" ]; then
  exit 0
fi
echo -n "  Commit ? (y) : "
answer

cd "${GIT_PROJ}"
source /etc/profile.d/cards.sh

if [ -z ${PACKAGES_LIST} ]; then
   echo "commit $COLLECTION/${PARAM[0]}"
   commit "$COLLECTION/${PARAM[0]}"
else
   for i in ${PACKAGES_LIST[@]}
   do
       echo "commit $i"
       commit "$i"
   done
fi
exit 0
