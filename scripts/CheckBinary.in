#!/bin/bash
#
#  cards
#
#  Copyright (c) 2007-2013 by NuTyX team (http://nutyx.org)

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#  USA.
#

source /etc/pkgmk.conf
# ************************************
# METTRE LA VARIABLE ci dessous à jour
# ************************************
DEPOT=sekong.4
FINAL_DEST=`hostname`
BOT_LOG_DIR="/var/log/pkgbuild"
BOT_STATUS_DIR="/$DEPOT/`uname -m`/STATUS/$FINAL_DEST"
BOT_LOG_ERROR_DIR="/tmp"
NIVEAU_FILE="/root/NIV.pakxe"
# ************************************

if [ -f /root/.nutyx_mirror_user ]; then
	RSYNCUSER=`cat /root/.nutyx_mirror_user`
fi
if [ -f /root/.nutyx_mirror_server ]; then
	RSYNCSERVER=`cat /root/.nutyx_mirror_server`
fi
if [ -z $PKGMK_PACKAGE_DIR ]; then
	echo "La variable PKGMK_PACKAGE_DIR"
	echo "n'est pas définie, ajustez-la dans /etc/pkgmk.conf"
	echo "assume /srv/NuTyX/release"
	PKGMK_PACKAGE_DIR="/srv/NuTyX/release"
	
fi
if [ -z $PKGMK_LOG_DIR ]; then
	echo "La variable PKGMK_LOG_DIR"
	echo "n'est pas définie, ajustez-la dans /etc/pkgmk.conf"
	echo "assume /var/log/pkgbuild"
	PKGMK_LOG_DIR="/var/log/pkgbuild"
fi

Checkldd() {
	
	cd $PKGMK_WORK_DIR/pkg
	rm -rf {var,etc,srv,lib/{modules,firmware},usr/{include,share,lib/{pkgconfig,python2.7}}}
	for i in *.tcl *.pxi *.m4  *.img *.png *.jar *.gz *.cs *.dll *.msg *.cf *.cset *.*.def \
	*.bat *.c *.lst *.dat *.schemas *.rules *.txt *.info *.multi *.rws *.h *.py *.pyo *.a \
	*.sh *.pc *.py *.pyc *.pm *.html *.example *.alias *.mod *.go *.la *.chk *.bin *.trans \
	*.la *.map *.xml *.zip *.tree *.result *.test *.inc .packlist *.rb *.enc *.exp *.typelib \
	*.spec *.js *.opt *.gif *.mk *.com *.exe *.tmpl *.cmake *.cfg *.tests
	do 	
		find . -name "$i" -exec rm  {} \;
	done
	for fileTocheck in `find . -type f`
	do 
		ldd $fileTocheck
	done
	rm -rf $PKGMK_WORK_DIR/pkg/*
}

Error() {
	echo "Error !!!" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	rm  $BOT_STATUS_DIR/TODO
	mv $BOT_LOG_ERROR_DIR/*.log $BOT_STATUS_DIR/
	mv $BOT_LOG_ERROR_DIR/ERROR $BOT_STATUS_DIR/ERROR
	if [ "$NIVEAUFOUND" == "yes" ]; then
		mv $NIVEAU_FILE $BOT_STATUS_DIR/NIVEAU
	fi
	Resync
	/sbin/shutdown -y -h 0
}
BuildError() {
        echo "BuildError !!!" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
        mv $PKGMK_LOG_DIR/$1.log  $BOT_LOG_ERROR_DIR/
        echo "$1" >>  $BOT_LOG_ERROR_DIR/ERROR
}
UpdateBinaries() {
	if [ ! -z $RSYNCUSER ] && [ -f /root/.rsync ]; then
		cd $PKGMK_PACKAGE_DIR
		rsync -azv --delete-after --password-file=/root/.rsync rsync://$RSYNCUSER@$RSYNCSERVER/$DEPOT/`uname -m`/$FINAL_DEST/ $PKGMK_PACKAGE_DIR/
	else
		rsync -azv --delete-after /$DEPOT/`uname -m`/$FINAL_DEST/ $PKGMK_PACKAGE_DIR/
	fi
}
Pkgrepgen() {
	cd $PKGMK_PACKAGE_DIR
	pkg-repgen
	cd -
}
Resync() {
	if [ ! -z $RSYNCUSER ] && [ -f /root/.rsync ]; then
		rsync -azv --delete-after --password-file=/root/.rsync $PKGMK_PACKAGE_DIR/ rsync://$RSYNCUSER@$RSYNCSERVER/$DEPOT/`uname -m`/$FINAL_DEST/
	else
		rsync -azv --delete-after $PKGMK_PACKAGE_DIR/ /$DEPOT/`uname -m`/$FINAL_DEST/
	fi
}
SuppressOld() {
        cd $PKGMK_PACKAGE_DIR
        # Suppression des binaires obsolètes
        find . -name "*.xz" -exec basename {} \; > /tmp/list_binaires
        for i in `cat /tmp/list_binaires`
        do
		prt-get info `echo $i|cut -d "#" -f1` > /dev/null || rm -v "$PKGMK_PACKAGE_DIR/${i}"
	done
}
GenerateDepsList(){
cd /root
echo "Mise à jour des Niveaux" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
/usr/bin/deps.awk scan depend
# On supprime les 2 dernières lignes, je sais c'est vraiment tordu
sed -i 'N;$!P;$!D;$d' $NIVEAU_FILE
cd -
}
MiseAJour() {
for i in `cat $NIVEAU_FILE |cut -d "," -f 1`
do
	echo "Niveau $i:"  >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	MiseAJourParNiveau $i
	if [ -f $BOT_LOG_ERROR_DIR/ERROR ]; then
		echo "Erreur de build" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		Error
	fi
done
}
MiseAJourParNiveau() {
for j in `grep ^$1, $NIVEAU_FILE|sed "s/,[0-9]*$//"|sed "s/^[0-9]*,//"|sed "s/,/ /g"`
do
	echo "Niveau $1, Port $j OK ?"
	echo "Niveau $1, Port $j OK ?" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	Version=`prt-get info $j|grep ^Version|cut -d ":" -f2|sed "s/ //g"`
	Release=`prt-get info $j|grep ^Release|cut -d ":" -f2|sed "s/ //g"`
        VersionSource="$Version-$Release"
        Pkgfile=`prt-get printf "%p/%n/Pkgfile\n" --filter=$j`
	if  [ ! -f $PKGMK_PACKAGE_DIR/$j#$VersionSource.pkg.tar.xz ] \
	&& [ ! -f $BOT_STATUS_DIR/$j.blacklist ]; then
		echo "$j: pas en Binaire"
		echo "$j: pas en Binaire" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		date >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		if [ -a $BOT_STATUS_DIR/DEBUG ]; then
			/usr/bin/pkg-get base >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		else
			echo "pkg-get base" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			/usr/bin/pkg-get base
		fi
		date >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		echo "pkg-get base OK" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		if [ -f $BOT_LOG_ERROR_DIR/$j.log ];then
			rm $BOT_LOG_ERROR_DIR/$j.log
		fi
		if [ -a $BOT_STATUS_DIR/DEBUG ]; then
			/usr/bin/ADD $j >> $BOT_LOG_ERROR_DIR/LASTLOG.log || BuildError $j
		else
			date >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			echo "/usr/bin/ADD $j" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			/usr/bin/ADD $j || BuildError $j
			date >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		fi
		if [ -f $BOT_LOG_DIR/$j.log ]; then
			mv $BOT_LOG_DIR/$j.log $BOT_STATUS_DIR/logs/$j.log
			sed -i "s/,$j,/,/" $NIVEAU_FILE
		fi
        else
                                echo "Oui" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
        fi
done
echo "pkg-get base" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
/usr/bin/pkg-get base
echo "pkg-get base OK" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
}
CheckParNiveau() {
if [ ! -d $PKGMK_WORK_DIR/pkg ]; then
	mkdir -p $PKGMK_WORK_DIR/pkg
fi
for j in `grep ^$1, $NIVEAU_FILE|sed "s/,[0-9]*$//"|sed "s/^[0-9]*,//"|sed "s/,/ /g"`
do
	if ( ! pkginfo -l libgl > /dev/null 2>&1 ) ; then
		pkg-get install libgl
	fi
	echo "Niveau $1, Port $j OK ?" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	echo "Niveau $1, Port $j OK ?"
	Version=`prt-get info $j|grep ^Version|cut -d ":" -f2|sed "s/ //g"`
	Release=`prt-get info $j|grep ^Release|cut -d ":" -f2|sed "s/ //g"`
	VersionSource="$Version-$Release"
	Pkgfile=`prt-get printf "%p/%n/Pkgfile\n" --filter=$j`
	if [ -a $BOT_STATUS_DIR/DEBUG ]; then
		echo "Checkldd" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	else
		if  [ -f $PKGMK_PACKAGE_DIR/$j#$VersionSource.pkg.tar.xz ]; then
			pkg-get depinst $j
			tar -C $PKGMK_WORK_DIR/pkg -xf $PKGMK_PACKAGE_DIR/$j#$VersionSource.pkg.tar.xz
			Checkldd > /tmp/result
			if ( grep found /tmp/result );then echo "$j" >> /root/BROKEN;fi
		fi
	fi
	pkg-get base
done
}
MiseAJourRecettes() {
# Si ports est installé la commande ports sera utilisé pour mettre à jour les ports
if [ -f /usr/bin/ports ]; then
	echo "ports -u" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	ports -u >> $BOT_LOG_ERROR_DIR/LASTLOG.log
else
	cd /usr/ports/base
	echo "git pull" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	git pull >> $BOT_LOG_ERROR_DIR/LASTLOG.log
	cd -
fi
}
case "$1" in
        start)
                # Make shure time is correct
		if [ -f /root/bin/sshd_config ];then
                	cp /root/bin/sshd_config /etc/ssh/sshd_config
		fi
                if [ -a $BOT_STATUS_DIR/TODO ]; then
			date > $BOT_LOG_ERROR_DIR/LASTLOG.log
			echo "Begin of CheckBinary" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			if [ -f $BOT_STATUS_DIR/NIVEAU ]; then
				NiveauFound="yes"
				echo "cp $BOT_STATUS_DIR/NIVEAU $NIVEAU_FILE" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
				cp $BOT_STATUS_DIR/NIVEAU $NIVEAU_FILE
			fi
                        if [ -a $BOT_STATUS_DIR/ERROR ]; then
                                rm $BOT_STATUS_DIR/ERROR
				rm $BOT_STATUS_DIR/*.log
                        fi
                        UpdateBinaries >> $BOT_LOG_ERROR_DIR/LASTLOG.log
                        echo "source /etc/profile" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
                        source /etc/profile
                        echo "cd /root" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			cd /root
			MiseAJourRecettes
			if [ ! -f $NIVEAU_FILE ];then
				GenerateDepsList
			fi
			if [ $# -lt 2 ]; then
				echo "MiseAJour"
                        	MiseAJour
				Pkgrepgen
				Resync
				if [  "$NiveauFound" == "yes" ];then
					mv $NIVEAU_FILE $BOT_STATUS_DIR/NIVEAU
				fi
				/sbin/shutdown -y -h 0
			fi
		fi
		if [ -a $BOT_STATUS_DIR/CHECK ] && ! [ -a $BOT_STATUS_DIR/DEBUG ] \
		&& ! [ -a $BOT_STATUS_DIR/TODO ]; then
			date > $BOT_LOG_ERROR_DIR/LASTLOG.log
			echo "Begin of CheckLinks"
			echo "Begin of CheckLinks" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			UpdateBinaries >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			echo "source /etc/profile" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			source /etc/profile
			echo "cd /root" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			cd /root
			echo "MiseAJourRecettes"
			MiseAJourRecettes
			echo "${0} check"
			${0} check
			rm $BOT_STATUS_DIR/CHECK
			/sbin/shutdown -y -h 0	
			
		fi
		if [ $# -gt 1 ]; then
			if [ -a $BOT_STATUS_DIR/ERROR ]; then
				rm $BOT_STATUS_DIR/ERROR
				rm $BOT_STATUS_DIR/*.log
			fi
			UpdateBinaries >> $BOT_LOG_ERROR_DIR/LASTLOG.log
			MiseAJourRecettes
			if [ ! -f $NIVEAU_FILE ];then
				GenerateDepsList
			fi
			echo "MiseAJourParNiveau $2"	
			MiseAJourParNiveau $2
			Pkgrepgen
			if [ -a $BOT_STATUS_DIR/CHECK ]; then
			        CheckParNiveau $2
				mv /root/BROKEN /$DEPOT/BROKEN
			fi
			if ! [ -a $BOT_STATUS_DIR/DEBUG ]; then
				Resync
			fi
			if [ "$NiveauFound" == "yes" ]; then
				mv $NIVEAU_FILE $BOT_STATUS_DIR/NIVEAU
			fi
			/sbin/shutdown -y -h 0
		fi
                ;;
        resync)
		Pkgrepgen
                Resync;;
        stop)
                cd /root
                if [ -a $BOT_STATUS_DIR/TODO ] && ! [ -a $BOT_STATUS_DIR/ERROR ]; then
                        echo "Stop of CheckBinary" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
                        echo "Suppress Old Binaire" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
                        SuppressOld  >> $BOT_LOG_ERROR_DIR/LASTLOG.log
                        echo "Rsync Binaires" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
                        Resync  >> $BOT_LOG_ERROR_DIR/LASTLOG.log

                fi
                echo "*** END ***" >> $BOT_LOG_ERROR_DIR/LASTLOG.log
                date >> $BOT_LOG_ERROR_DIR/LASTLOG.log
		mv $BOT_LOG_ERROR_DIR/LASTLOG.log $BOT_STATUS_DIR/LASTLOG.log;;
        status)
                if [ -a $BOT_STATUS_DIR/TODO ]; then
                        echo "Something to build ..."
                else
                        echo "Nothing to do"
                fi;;
        before)
                UpdateBinaries;;
        after)
		Pkgrepgen
                Resync;;
	check)
		if [ ! -d $PKGMK_WORK_DIR/pkg ]; then
			mkdir -p $PKGMK_WORK_DIR/pkg
		fi
		if [ $# -lt 2 ]; then
			if [ -f /root/BROKEN ]; then
				rm /root/BROKEN
			fi
			if [ -f /$DEPOT/BROKEN ]; then
				rm /$DEPOT/BROKEN
			fi
			if [ ! -f $NIVEAU_FILE ];then
				GenerateDepsList
			fi
			for NIV in `cat $NIVEAU_FILE |cut -d "," -f 1`
	        	do
				CheckParNiveau $NIV
			done
			cd /root
			mv /root/BROKEN /$DEPOT/BROKEN
		else
			Version=`prt-get info ${2}|grep ^Version|cut -d ":" -f2|sed "s/ //g"`
			Release=`prt-get info ${2}|grep ^Release|cut -d ":" -f2|sed "s/ //g"`
			VersionSource="$Version-$Release"
			Pkgfile=`prt-get printf "%p/%n/Pkgfile\n" --filter=${2}`
			if  [ -f $PKGMK_PACKAGE_DIR/${2}#$VersionSource.pkg.tar.xz ]; then
				pkg-get depinst ${2}
				tar -C $PKGMK_WORK_DIR/pkg -xf $PKGMK_PACKAGE_DIR/${2}#$VersionSource.pkg.tar.xz
				Checkldd > /tmp/result
				if ( grep found /tmp/result );then echo "${2} Broken";fi
			else
				echo "$PKGMK_PACKAGE_DIR/${2}#$VersionSource.pkg.tar.xz Pas trouvé"
			fi
			cd /root
			pkg-get base

		fi;;
	checkn)	
		if [ $# -lt 2 ]; then
			echo "Usage: ${0} checkn <niveau>"
			exit 1
		fi
		CheckParNiveau $2
		cd /root;;	
 
	list)
		GenerateDepsList;;
	suppress)
		SuppressOld;;

       *)
                echo "Usage: ${0} {before|after|start|stop|status|resync|check|checkn|list|suppress}"
                exit 1
                ;;
esac
# End of file
