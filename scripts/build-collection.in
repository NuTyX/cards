#!/bin/bash
#  Copyright (c) 2016 by NuTyX team (http://nutyx.org)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#  USA.
#
#*********************************************************************************************************************************
# 1. INTRODUCTION
#
# This script is able to compile any port from any official collections that are one of:
# - base
# - base-extra
# - cli
# - cli-extra
# - gui
# - gui-extra
# - gnome
# - xfce4
# - kde5
# - mate
# - enlightenment
#
# IMPORTANTS NOTES:
# a. We make a difference only for base, cli and gui and their -extra counterparts
#    Example: to compile the all cli-extra collection on the stable version, the syntax will be:
#
#    build-collection /stable/cli-extra
#    As simple as that :)
#
# b. Some services are going to be activated (http (port 80), rpcbind (port 111), nfs (port 2049)
#    If your main router forward some of those ports to your machine. You need to checkit out
#
# c. You need about 10 Gbytes of free space for the mirror of NuTyX (/srv/remote), another
#    10 Gbytes of free space for your /srv/local folder and another 6 to 8 Gbytes for your 
#    (temporary) installed NuTyX. Also be aware that /srv/local/sources will continuously grow
#    until you delete some sources / package files
#
# d. You need to have the install-nutyx script in the /root/bin directory, use a link to
#    your 'core' git
#
#       mkdir /root/bin
#       ln -sv /home/thierry/git/core/scripts/install-nutyx /root/bin/install-nutyx
#
#    Adapt '/home/thierry/git/core' to the path to your 'core' git
#
# e. The installed NuTyX should ALWAYS be installed under /current or /stable. It means if you have to use
#    another (bigger) partition for example, you should use a link to it:
#    Example:
#
#       ln -sv /home/thierry/chroot-64/stable /stable
#
#    Replaces stable with current if you plan to build against the current version of NuTyX binaries.
#    In this example the installed NuTyX will always ends up in /home/thierry/chroot-64/current/xxx
#    which is fine because it's another bigger partition (about 740 Gb in this case).
#
# f. They should be TWO copies of the binaries depots packages. One is the original set and is located in
#    '/srv/remote' folder. It's a copy of the official availables packages. This set can be resync
#    (to receive any updates from upstream) automaticaly every hour for example.
#
#    The second set is located in '/srv/local' folder. This set is your working copy. Means as soon
#    you start some compilations, this set will be out of sync with the official one.
#
#
# 2. HOW DOES THIS WORK ?
#
#  The script will:
#
#  - install a NuTyX current or stable (define by the first part of the first argument)
#    into a folder (define by the first argument)
#  - install the devel packages
#  - mount the depot needed for the specific collection (define by the first argument)
#  - mount the ports needed for the specific collection
#  - mount the sources and logs folders
#  - enter (chroot) in the installed NuTyX
#  - run the script found in /tmp folder which is buildup by collecting info from arguments
#  - will compile what has to be compile with or without success but in both cases will
#  - exit the installed NuTyX
#  - umount the depot, the ports, the sources and logs folders 
#  - IF NO ERROR OCCUR at umount process will delete the current or stable NuTyX folder
#
# 3. ARGUMENTS:
#
# You can pass 1 or 2 arguments:
#
# Parameter 1 (mandatory):
#  It's specify the version we are going to use (currently it can be "stable" or "current"
#  and it's specify the collection which is one of following possible collection:
#
#  base, base-extra, cli, cli-extra, gui, gui-extra, enlightenment, gnome, kde5, mate, xfce4
#  You note that even under kde5 (for example) we have two collection kde5 and kde5-extra, even
#  then the script will automatically build both
#
# Parameter 2 (optionnal):
#  This parameter specify the port you want to build only. Currently this option works
#  only with base, base-extra, cli, cli-extra, gui, gui-extra collections.
#  Example:
#   build-collection /current/base-extra kernel
#
#  This example will build (or rebuild) the kernel binaries only
#
# 3. CONFIGURATION OF THE HOST NuTyX
#
# It's absolutly necessary to configure your NuTyX host machine properly otherwise
# nothing will work like expected
#
# Files that are involve in the configuration process:
#
# - /etc/install-nutyx.conf
# - /etc/install-nutyx.conf.d/pkgmk.conf
# - /etc/fstab
#
# The /etc/install-nutyx.conf file MUST have 2 variables set properly:
# DEPOT=/DEPOT
# URL="localhost"
#
# The /etc/install-nutyx.conf.d/pkgmk.conf should contains:
#  export CFLAGS="-O2 -pipe"
#  export CXXFLAGS="${CFLAGS}"
#  export MAKEFLAGS="-j8"
#  PKGMK_GROUPS=(devel man doc service)
#  PKGMK_LOCALES=(fr de it es nl pt da nn sv fi tr)
#  PKGMK_CLEAN="no"
#  PKGMK_KEEP_SOURCES="yes"
#  PKGMK_SOURCE_DIR="/sources"
#  PKGMK_WORK_DIR="/tmp/work"
#  PKGMK_COMPRESS_PACKAGE="yes"
#  PKGMK_COMPRESSION_MODE="xz"
#  PKGMK_IGNORE_REPO="no"
#  PKGMK_IGNORE_COLLECTION="no"
#  PKGMK_IGNORE_RUNTIMEDEPS="no"
#
# As explained above, we mount a lot of folders, means they HAVE TO BE specified in the /etc/fstab
# As we used predefined folders (/DEPOT, /sources, /LOGS) we specify them in /etc/fstab:
#
# Example for the cli-extra collection of the current version specify following lines
#
#  localhost:/srv/local/sources /stable/cli-extra/sources nfs noauto,rw,vers=3,_netdev,rsize=8192,wsize=8192 0 0
#  localhost:/srv/local/stable/x86_64 /stable/cli-extra/DEPOT nfs noauto,rw,vers=3,_netdev,rsize=8192,wsize=8192 0 0
#  localhost:/home/thierry/git/extra /stable/cli-extra/root/extra nfs noauto,rw,vers=3,_netdev,rsize=8192,wsize=8192 0 0
#  localhost:/srv/local/logs/stable/x86_64/cli-extra /stable/cli-extra/LOGS nfs noauto,rw,vers=3,_netdev,rsize=8192,wsize=8192 0 0
#
#  Copy and adapt thoses four lines for every collection you planned to build.
#  Adapt '/home/thierry/git/extra' to your 'extra' git.
#  Replace (or add) stable version in case you plan to build on the current version.
#  Replace 'x86_64' with 'i686' if you plan to build on a 32 bits platform.
#  
# It means:
#  localhost should have nfs-serveur running and /srv folder define in /etc/exports file
#  localhost should have http serveur to save time when installing NuTyX from your localhost
#  localhost should have a cron task to sync periodically (every hour by default) the depot (optionnal)
#
# 4. Setup all the needed folders and get the official depot into the /srv/remote location
#
#  We create all the necessary folders (for our cli-extra collection example):
#
#    mkdir -p /srv/local/sources
#    mkdir -p /srv/local/logs/stable/x86_64/cli-extra
#
#  Replace 'stable' with 'current' if you plan to build on the current version.
#  Replace 'cli-extra' collection with the one you plan to build
#
#  To get all the binaries locally and used them (highly recommended) we need to rsync them, following command
#  will do that (takes quite a bit of time the first time):
#
#  rsync -av --delete --exclude=sources --exclude=logs --exclude=*.iso rsync://downloads.nutyx.org/nutyx/ /srv/remote/
#
# 5. GET ALL the services and tools
#
#   get rsync tar wget apache apache.service nfs-utils nfs-utils.service fcron fcron.service
#
# Adjust /etc/httpd/httpd.conf and replace
#
#   DocumentRoot "/srv/www" with  DocumentRoot "/srv/local"
#   <Directory "/srv/www"> with <Directory "/srv/local"> (on the next line)
#
# Add followings lines into /etc/exports file
#
#   /srv localhost(rw,no_root_squash,subtree_check,anonuid=99,anongid=99)
#   /home/thierry localhost(rw,no_root_squash,subtree_check,anonuid=99,anongid=99)
#
# Adjust '/home/thierry' path to your user path
#
# Create an fcron config file (optionnal):
#
#   fcrontab -e (in root)
#
#   0 * * * * rsync -av --delete --exclude=sources --exclude=logs --exclude=*.iso rsync://downloads.nutyx.org/nutyx/ /srv/remote/
#
#   means we will sync every hour at XX:00:00 up to you to adjust to what ever you like
#
#
# 6. START THE SERVICES
#
#    /etc/rc.d/init.d/httpd start
#    /etc/rc.d/init.d/nfs-server start
#
#  If you set a fcron task:
#
#    /etc/rc.d/init.d/fcron start
#
#  You are now ready to work
#  You can check the log of fcron in /var/log/cron.log
#  You can check the log of apache (http service) in /var/log/httpd/access.log and /var/log/httpd/error.log
#  You can check the log of your builds in http://localhost/logs
#
# 7. RSYNC the remote depot with your local depot
#
#  You do normaly this command only ones or every time you want to overwrite your work with the official
#  depot.
#
#     rsync -av --delete --exclude=sources --exclude=logs --exclude=*.iso /srv/remote/ /srv/local/
#
#  You are now ready to work.
#
# 8. DONE
#
#  As you are using YOUR COPY of the depot it's up to you to rerun the rsync command from point 7, means
#  you want to get rid of your work you did so far :)
#
# Enjoy NuTyX :)
#
#*********************************************************************************************************************************

setup_collection() {
	local DIR
	DIR="/$VERSION/$CHROOT"
	if [ "$CHROOT" == "enlightenment" ]; then
		echo "dir /DEPOT/enlightenment-extra
dir /DEPOT/enlightenment
dir /DEPOT/gui
dir /DEPOT/cli
dir /DEPOT/base
dir /DEPOT/base-extra
base /DEPOT/base
base /DEPOT/cli
base /DEPOT/gui
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "xfce4" ]; then
		echo "dir /DEPOT/xfce4-extra
dir /DEPOT/xfce4
dir /DEPOT/gui
dir /DEPOT/cli
dir /DEPOT/base
dir /DEPOT/base-extra
base /DEPOT/base
base /DEPOT/cli
base /DEPOT/gui
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "mate" ]; then
		echo "dir /DEPOT/mate-extra
dir /DEPOT/mate
dir /DEPOT/gui
dir /DEPOT/cli
dir /DEPOT/base
dir /DEPOT/base-extra
base /DEPOT/base
base /DEPOT/cli
base /DEPOT/gui
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "gnome" ]; then
		echo "dir /DEPOT/gnome-extra
dir /DEPOT/gnome
dir /DEPOT/gui
dir /DEPOT/cli
dir /DEPOT/base-extra
dir /DEPOT/base
base /DEPOT/base
base /DEPOT/cli
base /DEPOT/gui
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "kde5" ]; then
		echo "dir /DEPOT/kde5-extra
dir /DEPOT/kde5
dir /DEPOT/gui
dir /DEPOT/cli
dir /DEPOT/base
dir /DEPOT/base-extra
base /DEPOT/base
base /DEPOT/cli
base /DEPOT/gui
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "base" ]; then
		COLLECTION="core"
		echo "dir /DEPOT/base
base /DEPOT/base
logdir /LOGS" > $DIR/etc/cards.conf || exit 1

	fi
	if [ "$CHROOT" == "cli" ]; then
		COLLECTION="core"
		echo "dir /DEPOT/cli
dir /DEPOT/base
dir /DEPOT/base-extra
base /DEPOT/base
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "gui" ]; then
		COLLECTION="core"
		echo "dir /DEPOT/gui
dir /DEPOT/cli
dir /DEPOT/base
dir /DEPOT/base-extra
base /DEPOT/base
base /DEPOT/base-extra
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "base-extra" ]; then
		COLLECTION="extra"
		echo "dir /DEPOT/base-extra
dir /DEPOT/base
base /DEPOT/base
base /DEPOT/base-extra" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "cli-extra" ]; then
		COLLECTION="extra"
		echo "dir /DEPOT/cli-extra
dir /DEPOT/cli
dir /DEPOT/base-extra
dir /DEPOT/base
base /DEPOT/base
base /DEPOT/base-extra
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
	if [ "$CHROOT" == "gui-extra" ]; then
		COLLECTION="extra"
		echo "dir /DEPOT/gui-extra
dir /DEPOT/gui
dir /DEPOT/cli-extra
dir /DEPOT/cli
dir /DEPOT/base-extra
dir /DEPOT/base
base /DEPOT/base
logdir /LOGS" > $DIR/etc/cards.conf || exit 1
	fi
}


if [ $# -lt 1 ]; then
	echo "Specify the collection"
	exit  1
fi

if [ -d $1 ]; then
	echo "$1 exist ..."
	exit 1
fi

VERSION=`dirname $1`
VERSION=`basename $VERSION`
CHROOT=`basename $1`
COLLECTION="$CHROOT"

mkdir -p $1/etc || exit 1

if [ "$CHROOT" == "base" ] || [ "$CHROOT" == "cli"  ] || [ "$CHROOT" == "gui"  ]; then
	setup_collection
	DEVEL="cards.devel && cd /root/$COLLECTION && bash scripts/$CHROOT"
fi

if [ "$CHROOT" == "base-extra" ] || [ "$CHROOT" == "cli-extra"  ] || [ "$CHROOT" == "gui-extra"  ]; then
	setup_collection
	DEVEL="cards.devel && cd /root/$COLLECTION && bash scripts/$CHROOT"
fi
if [ "$COLLECTION" != "core" ] && [ "$COLLECTION" != "extra"  ]; then
	setup_collection
	DEVEL="cards.devel && cd /root/$CHROOT && bash scripts/$COLLECTION -a && bash scripts/$COLLECTION-extra"
fi

if [ $# -gt 1 ]; then
	DEVEL="$DEVEL $2"
else
	DEVEL="$DEVEL -a"
fi

export DEVEL VERSION

echo "CHROOT: $CHROOT"
echo "COLLECTION: $COLLECTION"
echo "VERSION: $VERSION"
echo "The command: KERNEL="NONE" LFS="$1" bash /root/bin/install-nutyx"
echo -n "DEVEL: $DEVEL "
echo -n " OK ? (y) "
read a

if [ "$a" != "y" ]; then
	echo "Answer should be 'y'"
	rm -rv $1
	exit 1
fi

mkdir -p $1/DEPOT || exit 1
mount $1/DEPOT || exit 1

mkdir -p $1/LOGS || exit 1
mount $1/LOGS || exit 1

mkdir -p $1/sources || exit 1
mount $1/sources || exit 1

mkdir -p $1/root/$COLLECTION || exit 1
mount $1/root/$COLLECTION || exit 1


KERNEL="NONE" LFS="$1" bash /root/bin/install-nutyx

umount $1/LOGS || exit 1
umount $1/sources || exit 1
umount $1/DEPOT || exit 1
umount $1/root/$COLLECTION || exit 1
rm -r $1
unset VERSION DEVEL
