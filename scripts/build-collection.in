#!/bin/bash
#  Copyright (c) 2016-2020 by NuTyX team (http://nutyx.org)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#  USA.
#
usage () {
echo '******************************************************************************
 1. INTRODUCTION

 This script is able to compile any port from any official collections that
 are one of:

 - base, cli ,cli-extra, gui, gui-extra, desktops or <yours>

 IMPORTANTS NOTES:

 a. As an example, to compile the all cli-extra collection
    on the rolling version, the syntax will be:

    build-collection cli-extra
    As simple as that :)

 b. You need about 5 Gbytes of free space to store the availables binaries
    from the NuTyX mirror. (/srv/www/<arch>/<version>),
    Also be aware that /srv/www/sources will continuously grow.

 c. The installed NuTyX should ALWAYS be under /rolling or /<version>.
    Where <version> is a valid version.

 d. In case of <yours> collections, it needs two collections:
    <yours> and <yours>-extra. A link will need to exist in your scripts
    folder of your git project.
    Example where <yours> is cinnamon:

    Collections names: cinnamon and cinnamon-extra
    Links in the git projects, at the root of your git project:
      ln -sv /usr/bin/ports scripts/cinnamon
      ln -sv /usr/bin/ports scripts/cinnamon-extra

 2. HOW DOES THIS WORK ?

  The script will do following steps:

  - install a rolling or a <version> of NuTyX
    (define by the git branch name).
  - install the devel packages
  - mount the depot needed for the specific collection
    (define by the first argument)
  - mount the ports needed for the specific collection
  - mount the sources and logs folders
  - enter (chroot) in the installed NuTyX
  - run the script found in /tmp folder which is buildup by
    collecting info from arguments
  - will compile what has to be compile with or without success
    but in both cases it will...
  - exit the installed NuTyX
  - umount the depot, the ports, the sources and logs folders.

 3. ARGUMENTS:

 You can pass 1, 2 or 3 arguments:

 Depreciate Parameter 1 (mandatory):

  Its specify the version we are going to use (currently it can be 'rolling' or '\<version\>'
  and its specify the collection which is one of following possible collection:
   base, cli, cli-extra, gui, gui-extra or your specific collection which can be named anything.

 Prefered Parameter 1 (mandatory):

  The version is automaticaly found from the git branch name, which means
  you need to launch the build-collection from the root folder of the git project.
  It is normaly named 'rolling'. Here then parameter 1 will specify the
  all collection or the specific package to build, as build-collection
  automaticaly find the collection name the package belong to, no need to
  specify the collection name anymore.


 Depreciate Parameter 2 (optionnal):

  This parameter works only with base, cli, cli-extra, gui, gui-extra,
  desktops and nos collections.
  This parameter specify the port you want to build only.
  Example:

   build-collection /rolling/cli-extra irssi

  This example will build (or rebuild) the irssi binaries only


 Depreciate Parameter 3 (optionnal):

  This parameter works only with base, cli, cli-extra, gui, gui-extra,
  desktops and nos collections.

  This parameter works only together with paramater 2. It will replace
  the version of the port ( and then the binaries ) with the value specify
  by this parameter 3.
  Example:

   build-collection /rolling/cli-extra irssi 1.2.2

  This example will upgrade the irssi binaries to version 1.2.2.
  Only possible to use this parameter if only version of the package
  change.

 Prefered Paramater 2 (optionnal:

  This parameter works only together with the prefered paramater 1.
  It will replace the version of the port ( and then the binaries )
  with the value specify by this prefered parameter 2.
  Example:

   build-collection irssi 1.2.2

  This example will upgrade the irssi binaries to version 1.2.2.
  Only possible to use this parameter if only version of the package
  change.

 3. CONFIGURATION OF THE HOST NuTyX

 Its absolutly necessary to configure properly your NuTyX host machine
 otherwise nothing will work like expected.

 Configuration file that is involve in the configuration process:

 - /etc/fstab

 As explained above, we mount various folders.
 As we used predefined /DEPOT, /sources and /LOGS (/srv/www) paths folders,
 they do not have to be specified in /etc/fstab:

 Here an example for the cli-extra collection of the rolling version
 you should specify following lines, adapted to your needs:

/home/thierry/git/packages-x86_64 /rolling/cli-extra/root/extra none bind

 In case you want to use your own path for /DEPOT, sources or /LOGS,
 they will need to be specified in /etc/fstab:

Here an example:

/home/thierry/sources /rolling/cli-extra/sources none bind
/home/thierry/www/x86_64/rolling /rolling/cli-extra/DEPOT none bind
/home/thierry/www/logs/x86_64/rolling /rolling/cli-extra/LOGS none bind
  

 4. Setup all the needed folders and get the official depot into the
 /srv/www location (adapt the folder to yours)

  We create all the necessary folders:

    mkdir -p /srv/www/sources
    mkdir -p /srv/www/logs/x86_64/rolling

  To get all the binaries locally and used them (highly recommended) we need to rsync them:
  for DIR in base cli
  do
   rsync -av --delete  \
   rsync://downloads.nutyx.org/nutyx/x86_64/rolling/$DIR/ \
   /srv/www/x86_64/rolling/$DIR/
  done

 Enjoy NuTyX :)

******************************************************************************
'|more
}
check_root() {
	if [ "$UID" == "0" ]; then
		echo "'root' is not recommended for building packages"
		exit 1
	fi
}
parse_arguments() {
while [ "$1" ]; do
	case $1 in
		-C|--cleanup)
			CLEANUP="yes"
			shift
			if [ -z ${1} ]; then
				echo "You need to specify a collection"
				exit 1
			fi
			PARAM+=($1);;
		-c|--confirm)
			CONFIRM="yes"
			echo "====> you choose to confirm" ;;

		-t|--test)
			DRY="yes"
			echo "====> you choose to test" ;;

		-h|--help)
			usage
			exit 0 ;;
		-*|--*)
			echo " Only -C|--cleanup, -t|--test or -c|--confirm are valid arguments"
			exit 1;;
		/*)
			echo "===> you plan to build in ${1} folder"
			VERSION=$(basename $(dirname "${1}"))
			COLLECTION=$(basename "${1}");;
		*)
			PARAM+=($1)
	esac

	shift
done
}
interrupted() {
echo "Interrupted !!!"
}
trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM
umount_all() {
for FOLDER in $MOUNT_POINTS
do
	[ -d /${VERSION}/${COLLECTION}/${FOLDER} ] || continue
	! mountpoint /${VERSION}/${COLLECTION}/${FOLDER} > /dev/null || \
	sudo umount /${VERSION}/${COLLECTION}/${FOLDER}
done
}
remove_all() {
for FOLDER in $MOUNT_POINTS
do
	[ -d /${VERSION}/${COLLECTION}/${FOLDER} ] || continue
	sudo rm -d /${VERSION}/${COLLECTION}/${FOLDER}
done
[ -z ${1} ] && exit 1
[ ! -d ${1} ] && exit 0
for i in run sys proc dev/pts dev
do
	[ -d ${1}/${i} ] || continue
	mountpoint ${1}/${i} > /dev/null || continue
	sudo umount ${1}/${i}
done
for FOLDER in ${1}/*
do
	[ -d ${FOLDER} ] || continue
	! mountpoint ${FOLDER} > /dev/null || continue
	sudo rm -r $FOLDER
done
find /${VERSION}/${COLLECTION} -type f -delete
rm -d /${VERSION}/${COLLECTION} || exit 1
echo "
>>>   ${1} cleanup successfully ...
"
}
error() {
	umount_all
	remove_all ${1}
	exit 1
}
find_collection () {
	for i in $(find . -name Pkgfile -exec dirname {} +) ; do
		unset COLLECTION
		COLLECTION="$(dirname $i|cut -d '/' -f2)"
		[ "$COLLECTION" == "chroot" ] && continue
		if [ "${PARAM[0]}" == "${COLLECTION}" ]; then
			unset PARAM
			return
		fi
		[ "${PARAM[0]}" == "$(basename $i)" ] && return
	done
	unset COLLECTION
}
setup_pkgmk_conf() {
PKGMK_CONF='
export CFLAGS="-O2 -pipe"
export CXXFLAGS="${CFLAGS}"
export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
PKGMK_GROUPS=(devel man doc service)
PKGMK_LOCALES=(af an ar as az be bg bs ca cs cy da de el es fi fr ga gl \
gn he hi hr hu ia id is it ja ka kk km kn ko lt lv mk ml mr ms my nl nn \
oc or pa pt pl rm ro ru rw si sq sk sl sr sv ta te th tr uk ur uz vi xh zh)
PKGMK_CLEAN="no"
PKGMK_KEEP_SOURCES="yes"
PKGMK_SOURCE_DIR="/sources"
PKGMK_WORK_DIR="/tmp/work"
PKGMK_COMPRESS_PACKAGE="yes"
PKGMK_COMPRESSION_MODE="xz"
PKGMK_IGNORE_REPO="no"
PKGMK_IGNORE_COLLECTION="no"
PKGMK_IGNORE_RUNTIMEDEPS="no"'
}
setup_cards_conf() {
CARDS_CONF=""

C="${COLLECTION}"

[[ "${COLLECTION}" != "base" && "${COLLECTION}" != "cli" && "${COLLECTION}" != "gui" && \
"${COLLECTION}" != "nos" && "${COLLECTION}" != "cli-extra" && "${COLLECTION}" != "gui-extra" && \
"${COLLECTION}" != "desktops" ]] && C="${COLLECTION}-extra"
if [ "${C}" == "${COLLECTION}-extra" ]; then
	CARDS_CONF+="
dir /DEPOT/${C}
dir /DEPOT/${COLLECTION}"
	C="gui"
fi
[ "${C}" == "gui-extra" ] && CARDS_CONF+="
dir /DEPOT/gui-extra"

[ "${C}" == "nos" ] && CARDS_CONF+="
dir /DEPOT/nos"

[ "${C}" == "desktops" ] && CARDS_CONF+="
dir /DEPOT/desktops"

[[ "${C}" == "gui" || "${C}" == "gui-extra" || "${C}" == "nos" || "${C}" == "desktops" ]] \
&& CARDS_CONF+="
dir /DEPOT/gui"

[ "${C}" == "cli-extra" ] && CARDS_CONF+="
dir /DEPOT/cli-extra"

[[ "${C}" == "cli" || "${C}" == "cli-extra" || "${C}" == "gui" || \
"${C}" == "gui-extra" || "${C}" == "nos" || "${C}" == "desktops" ]] && CARDS_CONF+="
dir /DEPOT/cli"

CARDS_CONF+="
dir /DEPOT/base
logdir /LOGS
base /DEPOT/base"
}
#
#
########################################################################
# BEGIN HERE
########################################################################
#
# ROOTMOUNT is set to '/srv/www' by default
# It make it easy to access files if http server is installed
# and configured as default
#
check_root
[ -z "$ROOTMOUNT" ] && ROOTMOUNT="/srv/www"

if [ -z "${1}" ]; then
	echo "
>>> At least one argument is mandatory
"
	exit 1
fi
	if ! ( $(which rsync > /dev/null) ); then
		echo "'rsync' not available"
		exit 1
	fi
	if ! ( $(which git > /dev/null) ); then
		echo "'git' not available"
		exit 1
	fi

if [ ! -d .git ]; then
	echo "
>>>	No Git project found in '"$(pwd)"', The '.git' folder not exist.
"
	exit 1
fi
parse_arguments "$@"

[ -z "$VERSION" ] && VERSION="$(git branch --show-current)"
[ -z "$COLLECTION" ] && find_collection


if [ -z "${PARAM[0]}" ]; then
	if [ -z "${COLLECTION}" ]; then
		echo "
>>>	Specify the collection
"
		exit  1
	fi
fi

if [ -z "${COLLECTION}" ]; then
	echo "
>>>	package ${PARAM[0]} not found in any collection
"
	exit  1
fi

if [ "$CLEANUP" == "yes" ]; then
	MOUNT_POINTS="DEPOT LOGS sources"
	umount_all
	remove_all "/${VERSION}/${COLLECTION}"
	exit 0
fi

if [ -d "/${VERSION}/${COLLECTION}" ]; then
	mount | grep /"${VERSION}/${COLLECTION}"
	echo "
>>>	/${VERSION}/${COLLECTION} exist ...
"
	exit 1
fi

if [ ! -z "${PARAM[1]}" ]; then
	CONFIRM="yes"
	if [ ! -f "$COLLECTION/${PARAM[0]}/Pkgfile" ]; then
		echo " $COLLECTION/${PARAM[0]}/Pkgfile not exist"
		exit 1
	fi
	. "$COLLECTION"/"${PARAM[0]}"/Pkgfile
	if [ -z "$version" ]; then
		echo ">>> version variable not net !"
		exit 1
	fi
	if [ "$version" == "${PARAM[1]}" ]; then
		echo ">>> version is the same !!!"
		exit 1
	fi
fi

# check if VERSION folder exist
if ! [ -d "/$VERSION" ]; then
	echo ">>> /$VERSION folder not exist."
	exit 1
fi

# check if VERSION is own by me
if ! [ -O "/$VERSION" ]; then
	echo ">>> /$VERSION is not own by $(whoami)"
	exit 1
fi

GIT_PROJ=$(pwd)

if [ -z "$GIT_PROJ" ]; then
	error "Git root: ${GIT_PROJ} empty"
	exit 1
fi

GIT=$(basename $GIT_PROJ)

if ! [ "$DRY" == "yes" ]; then
	mkdir -p "/${VERSION}/${COLLECTION}/etc" || exit 1
fi

setup_cards_conf
[ "$DRY" == "yes" ] || echo "$CARDS_CONF" > /$VERSION/$COLLECTION/etc/cards.conf

if [ "$COLLECTION" == "base" ] \
|| [ "$COLLECTION" == "cli"  ] \
|| [ "$COLLECTION" == "gui" ] \
|| [ "$COLLECTION" == "cli-extra"  ] \
|| [ "$COLLECTION" == "gui-extra" ] \
|| [ "$COLLECTION" == "desktops" ] \
|| [ "$COLLECTION" == "nos" ]; then
	DEVEL="cards.devel \
&& cd /root/$GIT \
&& bash scripts/$COLLECTION"
	if ! [ -z "${PARAM[0]}" ]; then
		DEVEL="$DEVEL ${PARAM[0]}"
	else
		DEVEL="$DEVEL -a"
	fi
else
	DEVEL="cards.devel \
&& cd /root/$GIT \
&& bash scripts/$COLLECTION -a \
&& bash scripts/$COLLECTION-extra -a"
	EXTRA="yes"
fi

setup_pkgmk_conf
[ "$DRY" == "yes" ] || echo "$PKGMK_CONF" >/$VERSION/$COLLECTION/etc/pkgmk.conf

export DEVEL VERSION

echo ""
echo " pkgmk.conf:
 ==========="
echo "$PKGMK_CONF"
echo ""
echo " cards.conf:
 ==========="
echo "$CARDS_CONF"
echo ""
echo " COLLECTION: $COLLECTION"
echo "GIT Project: $GIT_PROJ"
echo "    VERSION: $VERSION"
echo "The command: KERNEL="NONE" LFS="/${VERSION}/${COLLECTION}" DEPOT="/DEPOT" install-nutyx"
echo "      DEVEL: $DEVEL "
echo ""
echo "The rsync  : rsync -a $GIT_PROJ/${COLLECTION}/ /${VERSION}/${COLLECTION}/root/$GIT/${COLLECTION}/"
[ "$EXTRA" == "yes" ] && \
echo "             rsync -a $GIT_PROJ/${COLLECTION}-extra/ /${VERSION}/${COLLECTION}/root/$GIT/${COLLECTION}-extra/"
echo ""

[ "$DRY" == "yes" ] && exit 0
if [ ! -z "${PARAM[1]}" ]; then
	echo ""
	echo " Upgrading ${PARAM[0]}: $version -> ${PARAM[1]}"
	echo ""
fi
if [ "$CONFIRM" == "yes" ]; then
	echo -n "  OK ? (y) : "
	read a
	if [ "$a" != "y" ]; then
		echo "Answer should be 'y'"
		rm -rv "/${VERSION}/${COLLECTION}"
		exit 1
	fi
fi

if [ ! -z "${PARAM[1]}" ]; then
	sed -i "s@version=$version@version=${PARAM[1]}@" \
	"$COLLECTION"/"${PARAM[0]}"/Pkgfile
	sed -i "/release=/d" "$COLLECTION"/"${PARAM[0]}"/Pkgfile
fi

mkdir -p /${VERSION}/${COLLECTION}/DEPOT || error /${VERSION}/${COLLECTION}
if [ -d ${ROOTMOUNT}/$(uname -m)/${VERSION} ]; then
	sudo mount --bind ${ROOTMOUNT}/$(uname -m)/${VERSION} /${VERSION}/${COLLECTION}/DEPOT || error /${VERSION}/${COLLECTION}
else
	sudo mount /${VERSION}/${COLLECTION}/DEPOT || error /${VERSION}/${COLLECTION}
fi
MOUNT_POINTS="DEPOT"

mkdir -p /${VERSION}/${COLLECTION}/LOGS
if [ -d ${ROOTMOUNT}/logs/$(uname -m)/${VERSION} ];then
	sudo mount --bind ${ROOTMOUNT}/logs/$(uname -m)/${VERSION} /${VERSION}/${COLLECTION}/LOGS || error /${VERSION}/${COLLECTION}
else
	sudo mount /${VERSION}/${COLLECTION}/LOGS || error /${VERSION}/${COLLECTION}
fi
MOUNT_POINTS="$MOUNT_POINTS LOGS"


mkdir -p /${VERSION}/${COLLECTION}/sources || error /${VERSION}/${COLLECTION}
if [ -d ${ROOTMOUNT}/sources ]; then
	sudo mount --bind ${ROOTMOUNT}/sources /${VERSION}/${COLLECTION}/sources || error /${VERSION}/${COLLECTION}
else
	sudo mount /${VERSION}/${COLLECTION}/sources || error /${VERSION}/${COLLECTION}
fi
MOUNT_POINTS="$MOUNT_POINTS sources"

mkdir -p /${VERSION}/${COLLECTION}/root/$GIT || error /${VERSION}/${COLLECTION}
rsync -a $GIT_PROJ/${COLLECTION}/ /${VERSION}/${COLLECTION}/root/$GIT/${COLLECTION}/ || error "rsync"
mkdir /${VERSION}/${COLLECTION}/root/$GIT/scripts
ln -sv /usr/bin/build-port /${VERSION}/${COLLECTION}/root/$GIT/scripts/${COLLECTION}
if [ "$EXTRA" == "yes" ]; then
	rsync -a $GIT_PROJ/${COLLECTION}-extra/ \
		/${VERSION}/${COLLECTION}/root/$GIT/${COLLECTION}-extra/ || error "rsync"
	ln -sv /usr/bin/build-port \
		/${VERSION}/${COLLECTION}/root/$GIT/scripts/${COLLECTION}-extra
fi

echo 'running the command: sudo KERNEL="NONE" LFS="/${VERSION}/${COLLECTION}" DEPOT="/DEPOT" DEVEL="$DEVEL" install-nutyx || error /${VERSION}/${COLLECTION}'
sudo KERNEL="NONE" LFS="/${VERSION}/${COLLECTION}" DEPOT="/DEPOT" DEVEL="$DEVEL" install-nutyx || error /${VERSION}/${COLLECTION}

umount_all
remove_all "/${VERSION}/${COLLECTION}"
unset VERSION DEVEL

# Don't try to commit if no specific package was build
if [ -z "${PARAM[0]}" ]; then
	exit 0
fi
echo -n "  Commit ? (y) : "
read a
if [ "$a" != "y" ]; then
	exit 0
fi
cd "${GIT_PROJECT}"
source /etc/profile.d/cards.sh
commit "$COLLECTION/${PARAM[0]}"
exit 0
