.\" man page for cards
.\"
.\" .PU
.TH "cards #VERSION#" "8" "" "" ""
.SH "NAME"
.LP
cards \- the NuTyX package management tool including pkgutils from CRUX (see http://www.crux.nu) with some extra features.
.SH "SYNOPSIS"
.B cards command [options] <arguments>
.br
.SH "DESCRIPTION"
cards which stand for Create Add Remove and Download System is a package management system tool which provides
all the basic functionality for a package management system.
It can works with the local ports tree AND the available binaries from the mirror.
It is made of two parts, one is for the normal users
who just want to have all the basics actions for manage the packages on the NuTyX distribution.
Because cards is a fork of pkgutils tool from CRUX distribution,
the second part includes a script pkgmk(8) for the creation of binaries,
they is a set of basic commands for dealing with local binaries.
The commands are: pkgadd(8), pkgrm(8) and pkginfo(8).
The ports(8) command is also part of the cards.devel subpackage.
Cards offers followings features:

.PP
.TP
\ \ \ \(bu
abstract ports installation/update from file system

.TP
\ \ \ \(bu
install/update a list of packages with one command

.TP
\ \ \ \(bu
upgrade the obslolete installed packages with one command

.TP
\ \ \ \(bu
list dependencies for a list of packages

.TP
\ \ \ \(bu
show information about binaries or ports

.TP
\ \ \ \(bu
search within the binaries or within the ports

.TP
\ \ \ \(bu
able to return to a base system in case of compiling for a bot build to make sure all the dependencies are mentionned.
.PP

.SH "SCENARIOS"

.B binaries

In another more classical scenario, cards will install, upgrade binaries packages available
from the define mirror specified in cards.conf. In this scenario, cards deals with packages
and subpackages. For example the glibc package is separate in glibc, glibc.devel, glibc.man, glibc.fr, and so on.


.B build

In this scenario, cards is basically building and installing upgrading packages, using
the script mybld. It deals with the ports. As long you are at the root of the collections,
cards will search for the respective port itself in a list of collections specified in cards.conf.

.PP

cards also offers some features like searching binaries or ports by name,
showing information about binaries or ports (without installing them of course)
and can list the dependencies listed in the Pkgfile, and provide a
complete dependency list for a port. Note that dependencies can be checked if
they are really existing. A command can be used to list all the packages
(or dependencies) per level of compilation.

.PP

cards have a show configuration mode so you can check how the configuration
file is. Use the config command for this (see also: COMMAND)

.SH "RETURN VALUE"
cards returns 0 on success and a non-zero value otherwise (exact
value -> meaning mapping to be determined...)

.SH "COMMANDS"
cards uses so called commands, which always have to be the first
non-option argument passed. This is very similar to
.B git(1).
[command] can be one of the following:


.TP
.B install <package1> [<package2> ...] | <collection name> | <set name>
Binaries scenario: install all packages. It will download the binary package,
check for any dependencies, download the dependencies. Onces all the dependencies
are download. cards will install all the packages in the right order. If it's a
<collection name> passed as argument, it will installed all the packages belonging
to this <collection name>

.TP
.B upgrade
Binaries scenario: upgrade the obsolete installed packages on you system. It will not ask for
confirmation. It will download the binary package, check for any dependencies,
download the dependencies. Onces all the dependencies are download.
cards will install all the packages in the right order.

.TP
.B remove <package>
All scenarios: remove the <package>

.TP
.B config
All scenarios: print the actual configuration of cards. It shows the order of ports and binaries directories,
It shows also the arch defined (i686, x86_64, etc), the locale which going to be installed with the
.B cards install
command, and the defined log directory which will be used by the
.B cards create
commands.

.TP
.B diff
Binaries scenario: show differences between installed packages and binaries available on the mirror.

.TP
.B search [-n] <expr>
Search in the binaries for
.B expr
in their categories, collections, set, name, description, URL, packager and version.
If option -n is passed, it will search in the name of the package only.

.TP
.B files <package>
Print all the files belonging to the <package>

.TP
.B query <pattern>
Search in all installed package for files matching the
.B pattern
as file name in the database.

.TP
.B info [-S] [-b] <package>
if passed with -b option, print available info about the binary
.B package
if passed with -S option, print available Sets of
.B packages
if no option is passed, print available info about the installed
.B package

.TP
.B depends <package>
Ports scenario: print a recursive list of dependencies to install the package passed
as argument.

.TP
.B deptree <package>
print a tree of the dependencies of the package
.B package.

.TP
.B list [\-S|\-b]
List installed packages. If option -S is passed, it shows a list of available set of packages available.
If option -b is passed, it shows a list of binaries available in the miror server.

.TP
.B sync
Binaries scenario: synchronize local and remote metadatas from the mirror defined in
.B /etc/cards.conf.

.TP
.B create  <package>
Ports scenario: only used in the bot server. It must be launch from a chrooted NuTyX,
via the mybld command. It will install all the dependencies from the founded binaries
and then build the final package.

.TP
.B purge
All scenarios: Cleanup all the archives of the binaries found in the folders synchronised with any mirror. By default, folders are:
.B /var/lib/pkg/depot/base
,
.B /var/lib/pkg/depot/cli
and
.B /var/lib/pkg/depot/gui

.SH "OPTIONS"

.TP
.B -c
check if they are some update available, will return "yes" or "no"

.TP
.B -s
return the number of packages which can be upgrade.

.TP
.B -f
Force install of the package(s) in
.B cards install
or
.B cards upgrade
commands

.TP
.B -i
Shows installed package in
.B cards depends
command

.TP
.B --dry
dry mode in
.B cards create
commands. It does not make the action but only shows what will happens

.TP
.B -b
print info about the binary in
.B cards info
command. List available binaries in
.B cards list
command.

.TP
.B -u
update the binary package in
.B cards install
command.

.SH "CONFIGURATION"
.TP
See man cards.conf(5) and pkgmk.conf(5)

.SH "EXAMPLES"

.B Binaries scenario:
.TP
.B cards install irssi
download the binary from the mirror, check for dependencies

.TP
.B cards install -u openssl
download the binary from the mirror, upgrade openssl


.TP
.B cards search browser
Search in the metadata packages containing 'browser' in they name or description.

.SH

.B Ports scenario:
.TP
.B mybld mplayer
This command will install a bare NuTyX, install all the dependencies of mplayer
and build the package 'mplayer'.


.SH "AUTHORS"
Thierry Nuttens <tnut@nutyx.org>
.SH "SEE ALSO"
cards.conf(5), pkgmk(8), pkgadd(8), pkginfo(8), pkgmk.conf(5), mybld(8)
